name: CMake mingw

on: [push]

jobs:
  build:
    name: build

    strategy:
      matrix:
        os: [windows-latest]
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        BUILD_TYPE: [Release, Debug]

    defaults:
      run:
        shell: cmd
        
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      SOURCE_DIR:  ${{github.workspace}}/source
      TOOSL_DIR:   ${{github.workspace}}/tools
      INSTALL_DIR: ${{github.workspace}}/install

    steps:
    - uses: actions/checkout@v2
      #with:
        #fetch-depth: 0

    - name: make_directory
      run: |
        cmake -E make_directory ${{env.SOURCE_DIR}}
        cmake -E make_directory ${{env.TOOSL_DIR}}
        cmake -E make_directory ${{env.INSTALL_DIR}}

    - name: pacman
      env:
        PATH: C:\msys64\usr\bin
      run: | 
        C:\msys64\usr\bin\pacman -S --noconfirm mingw-w64-x86_64-cmake ^
            mingw-w64-x86_64-make ^
            mingw-w64-x86_64-nsis ^
            mingw-w64-x86_64-gcc ^
            mingw-w64-x86_64-qt5 ^
            mingw-w64-x86_64-zlib ^
            mingw-w64-x86_64-openjpeg ^
            mingw-w64-x86_64-libjpeg-turbo ^
            mingw-w64-x86_64-libpng ^
            mingw-w64-x86_64-openh264 ^
            mingw-w64-x86_64-libvpx ^
            mingw-w64-x86_64-opus ^
            mingw-w64-x86_64-speex ^
            mingw-w64-x86_64-speexdsp ^
            mingw-w64-x86_64-qxmpp ^
            mingw-w64-x86_64-ffmpeg ^
            mingw-w64-x86_64-opencv ^
            mingw-w64-x86_64-yasm ^
            git base-devel
        
    - name: git clone RabbitCommon
      working-directory: ${{env.SOURCE_DIR}}
      run: git clone https://github.com/KangLin/RabbitCommon.git

    - name: Cache installed
      uses: actions/cache@v2
      id: cache-installed
      with:
        path: |
          ${{env.INSTALL_DIR}}
        key: cache-installed-mingw-2021-10-29
        
    - name: build log4qt
      working-directory: ${{env.SOURCE_DIR}}
      env:
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}/lib/cmake/Log4Qt (
            git clone -b v1.5.1 "https://github.com/MEONMedical/Log4Qt.git"
            cd Log4Qt
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}}
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )
        
#    - name: build qxmpp
#      working-directory: ${{env.SOURCE_DIR}}
#      env:
#        MSYSTEM: MINGW64
#        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
#      run: |
#        git clone -b v1.2.1 "https://github.com/qxmpp-project/qxmpp.git"
#        cd qxmpp
#        cmake -E make_directory build
#        cd build
#        cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} -DWITH_VPX=ON -DWITH_OPUS=ON
#        cmake --build . --config ${{matrix.BUILD_TYPE}}
#        cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        
    - name: build qzxing
      working-directory: ${{env.SOURCE_DIR}}
      env:
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}/lib/cmake/QZXing (
            git clone "https://github.com/KangLin/qzxing.git"
            cd qzxing
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DBUILD_EXAMPLES=OFF -DQZXING_QML=OFF -DQZXING_ENABLE_ENCODER=ON
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build RabbitIm
      working-directory: ${{github.workspace}}
      env:
        RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
        #Qt5_Dir: C:\msys64\mingw64
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        cmake -E make_directory build
        cd build
        cmake .. -G"MinGW Makefiles" ^
            -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} ^
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/install ^
            -DCMAKE_PREFIX_PATH=${{env.INSTALL_DIR}}/lib/cmake ^
            -DLog4Qt_DIR=/lib/cmake/Log4Qt ^
            -DQXmpp_DIR=${{env.INSTALL_DIR}}/lib/cmake/qxmpp ^
            -DQZXing_DIR=${{env.INSTALL_DIR}}/lib/cmake/QZXing 
        cmake --build . --config ${{ matrix.BUILD_TYPE }}
        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install-runtime

    - name: Package
      working-directory: ${{github.workspace}}/build
      shell: cmd
      run: |
        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install-runtime
        copy /Y ${{env.INSTALL_DIR}}/bin\*.dll install\bin
        copy /Y ${{env.INSTALL_DIR}}/lib\*.dll install\bin
        copy /Y C:\msys64\mingw64\bin\*.dll install\bin
        makensis ${{github.workspace}}/build/Install.nsi
        ${{github.workspace}}/build/install/bin/RabbitImApp.exe ^
            -f "${{github.workspace}}/build/update_windows.xml" ^
            --pf RabbitIm-Setup-v0.1.0.exe -m "v0.1.0"
      if: ${{ matrix.BUILD_TYPE == 'Release' }}

    - name: update 
      uses: actions/upload-artifact@v2
      with:
        name: rabbitreim_mingw
        path: |
          ${{github.workspace}}/build/RabbitIm-Setup-*.exe
          ${{github.workspace}}/build/update_*.xml
      if: ${{ matrix.BUILD_TYPE == 'Release' }}
    
